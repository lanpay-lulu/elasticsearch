package org.relsearch;

/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
//@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-09-04")
public class DocBatch implements org.apache.thrift.TBase<DocBatch, DocBatch._Fields>, java.io.Serializable, Cloneable, Comparable<DocBatch> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DocBatch");

  private static final org.apache.thrift.protocol.TField REQUEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("requestId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SUBQUERY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("subqueryId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("index", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField SHARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("shardId", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField LOCAL_SHARD_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("localShardNum", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField DOCS_FIELD_DESC = new org.apache.thrift.protocol.TField("docs", org.apache.thrift.protocol.TType.LIST, (short)6);
  private static final org.apache.thrift.protocol.TField BATCH_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("batchNum", org.apache.thrift.protocol.TType.I32, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new DocBatchStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new DocBatchTupleSchemeFactory();

  public String requestId; // required
  public int subqueryId; // required
  public String index; // required
  public int shardId; // required
  public int localShardNum; // required
  public java.util.List<DocInfo> docs; // required
  public int batchNum; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    REQUEST_ID((short)1, "requestId"),
    SUBQUERY_ID((short)2, "subqueryId"),
    INDEX((short)3, "index"),
    SHARD_ID((short)4, "shardId"),
    LOCAL_SHARD_NUM((short)5, "localShardNum"),
    DOCS((short)6, "docs"),
    BATCH_NUM((short)7, "batchNum");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // REQUEST_ID
          return REQUEST_ID;
        case 2: // SUBQUERY_ID
          return SUBQUERY_ID;
        case 3: // INDEX
          return INDEX;
        case 4: // SHARD_ID
          return SHARD_ID;
        case 5: // LOCAL_SHARD_NUM
          return LOCAL_SHARD_NUM;
        case 6: // DOCS
          return DOCS;
        case 7: // BATCH_NUM
          return BATCH_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SUBQUERYID_ISSET_ID = 0;
  private static final int __SHARDID_ISSET_ID = 1;
  private static final int __LOCALSHARDNUM_ISSET_ID = 2;
  private static final int __BATCHNUM_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.BATCH_NUM};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.REQUEST_ID, new org.apache.thrift.meta_data.FieldMetaData("requestId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SUBQUERY_ID, new org.apache.thrift.meta_data.FieldMetaData("subqueryId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INDEX, new org.apache.thrift.meta_data.FieldMetaData("index", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SHARD_ID, new org.apache.thrift.meta_data.FieldMetaData("shardId", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LOCAL_SHARD_NUM, new org.apache.thrift.meta_data.FieldMetaData("localShardNum", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DOCS, new org.apache.thrift.meta_data.FieldMetaData("docs", org.apache.thrift.TFieldRequirementType.REQUIRED,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, DocInfo.class))));
    tmpMap.put(_Fields.BATCH_NUM, new org.apache.thrift.meta_data.FieldMetaData("batchNum", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DocBatch.class, metaDataMap);
  }

  public DocBatch() {
  }

  public DocBatch(
    String requestId,
    int subqueryId,
    String index,
    int shardId,
    int localShardNum,
    java.util.List<DocInfo> docs)
  {
    this();
    this.requestId = requestId;
    this.subqueryId = subqueryId;
    setSubqueryIdIsSet(true);
    this.index = index;
    this.shardId = shardId;
    setShardIdIsSet(true);
    this.localShardNum = localShardNum;
    setLocalShardNumIsSet(true);
    this.docs = docs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public DocBatch(DocBatch other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetRequestId()) {
      this.requestId = other.requestId;
    }
    this.subqueryId = other.subqueryId;
    if (other.isSetIndex()) {
      this.index = other.index;
    }
    this.shardId = other.shardId;
    this.localShardNum = other.localShardNum;
    if (other.isSetDocs()) {
      java.util.List<DocInfo> __this__docs = new java.util.ArrayList<DocInfo>(other.docs.size());
      for (DocInfo other_element : other.docs) {
        __this__docs.add(new DocInfo(other_element));
      }
      this.docs = __this__docs;
    }
    this.batchNum = other.batchNum;
  }

  public DocBatch deepCopy() {
    return new DocBatch(this);
  }

  @Override
  public void clear() {
    this.requestId = null;
    setSubqueryIdIsSet(false);
    this.subqueryId = 0;
    this.index = null;
    setShardIdIsSet(false);
    this.shardId = 0;
    setLocalShardNumIsSet(false);
    this.localShardNum = 0;
    this.docs = null;
    setBatchNumIsSet(false);
    this.batchNum = 0;
  }

  public String getRequestId() {
    return this.requestId;
  }

  public DocBatch setRequestId(String requestId) {
    this.requestId = requestId;
    return this;
  }

  public void unsetRequestId() {
    this.requestId = null;
  }

  /** Returns true if field requestId is set (has been assigned a value) and false otherwise */
  public boolean isSetRequestId() {
    return this.requestId != null;
  }

  public void setRequestIdIsSet(boolean value) {
    if (!value) {
      this.requestId = null;
    }
  }

  public int getSubqueryId() {
    return this.subqueryId;
  }

  public DocBatch setSubqueryId(int subqueryId) {
    this.subqueryId = subqueryId;
    setSubqueryIdIsSet(true);
    return this;
  }

  public void unsetSubqueryId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUBQUERYID_ISSET_ID);
  }

  /** Returns true if field subqueryId is set (has been assigned a value) and false otherwise */
  public boolean isSetSubqueryId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUBQUERYID_ISSET_ID);
  }

  public void setSubqueryIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUBQUERYID_ISSET_ID, value);
  }

  public String getIndex() {
    return this.index;
  }

  public DocBatch setIndex(String index) {
    this.index = index;
    return this;
  }

  public void unsetIndex() {
    this.index = null;
  }

  /** Returns true if field index is set (has been assigned a value) and false otherwise */
  public boolean isSetIndex() {
    return this.index != null;
  }

  public void setIndexIsSet(boolean value) {
    if (!value) {
      this.index = null;
    }
  }

  public int getShardId() {
    return this.shardId;
  }

  public DocBatch setShardId(int shardId) {
    this.shardId = shardId;
    setShardIdIsSet(true);
    return this;
  }

  public void unsetShardId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SHARDID_ISSET_ID);
  }

  /** Returns true if field shardId is set (has been assigned a value) and false otherwise */
  public boolean isSetShardId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SHARDID_ISSET_ID);
  }

  public void setShardIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SHARDID_ISSET_ID, value);
  }

  public int getLocalShardNum() {
    return this.localShardNum;
  }

  public DocBatch setLocalShardNum(int localShardNum) {
    this.localShardNum = localShardNum;
    setLocalShardNumIsSet(true);
    return this;
  }

  public void unsetLocalShardNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOCALSHARDNUM_ISSET_ID);
  }

  /** Returns true if field localShardNum is set (has been assigned a value) and false otherwise */
  public boolean isSetLocalShardNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOCALSHARDNUM_ISSET_ID);
  }

  public void setLocalShardNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOCALSHARDNUM_ISSET_ID, value);
  }

  public int getDocsSize() {
    return (this.docs == null) ? 0 : this.docs.size();
  }

  public java.util.Iterator<DocInfo> getDocsIterator() {
    return (this.docs == null) ? null : this.docs.iterator();
  }

  public void addToDocs(DocInfo elem) {
    if (this.docs == null) {
      this.docs = new java.util.ArrayList<DocInfo>();
    }
    this.docs.add(elem);
  }

  public java.util.List<DocInfo> getDocs() {
    return this.docs;
  }

  public DocBatch setDocs(java.util.List<DocInfo> docs) {
    this.docs = docs;
    return this;
  }

  public void unsetDocs() {
    this.docs = null;
  }

  /** Returns true if field docs is set (has been assigned a value) and false otherwise */
  public boolean isSetDocs() {
    return this.docs != null;
  }

  public void setDocsIsSet(boolean value) {
    if (!value) {
      this.docs = null;
    }
  }

  public int getBatchNum() {
    return this.batchNum;
  }

  public DocBatch setBatchNum(int batchNum) {
    this.batchNum = batchNum;
    setBatchNumIsSet(true);
    return this;
  }

  public void unsetBatchNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BATCHNUM_ISSET_ID);
  }

  /** Returns true if field batchNum is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BATCHNUM_ISSET_ID);
  }

  public void setBatchNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BATCHNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case REQUEST_ID:
      if (value == null) {
        unsetRequestId();
      } else {
        setRequestId((String)value);
      }
      break;

    case SUBQUERY_ID:
      if (value == null) {
        unsetSubqueryId();
      } else {
        setSubqueryId((Integer)value);
      }
      break;

    case INDEX:
      if (value == null) {
        unsetIndex();
      } else {
        setIndex((String)value);
      }
      break;

    case SHARD_ID:
      if (value == null) {
        unsetShardId();
      } else {
        setShardId((Integer)value);
      }
      break;

    case LOCAL_SHARD_NUM:
      if (value == null) {
        unsetLocalShardNum();
      } else {
        setLocalShardNum((Integer)value);
      }
      break;

    case DOCS:
      if (value == null) {
        unsetDocs();
      } else {
        setDocs((java.util.List<DocInfo>)value);
      }
      break;

    case BATCH_NUM:
      if (value == null) {
        unsetBatchNum();
      } else {
        setBatchNum((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case REQUEST_ID:
      return getRequestId();

    case SUBQUERY_ID:
      return getSubqueryId();

    case INDEX:
      return getIndex();

    case SHARD_ID:
      return getShardId();

    case LOCAL_SHARD_NUM:
      return getLocalShardNum();

    case DOCS:
      return getDocs();

    case BATCH_NUM:
      return getBatchNum();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case REQUEST_ID:
      return isSetRequestId();
    case SUBQUERY_ID:
      return isSetSubqueryId();
    case INDEX:
      return isSetIndex();
    case SHARD_ID:
      return isSetShardId();
    case LOCAL_SHARD_NUM:
      return isSetLocalShardNum();
    case DOCS:
      return isSetDocs();
    case BATCH_NUM:
      return isSetBatchNum();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof DocBatch)
      return this.equals((DocBatch)that);
    return false;
  }

  public boolean equals(DocBatch that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_requestId = true && this.isSetRequestId();
    boolean that_present_requestId = true && that.isSetRequestId();
    if (this_present_requestId || that_present_requestId) {
      if (!(this_present_requestId && that_present_requestId))
        return false;
      if (!this.requestId.equals(that.requestId))
        return false;
    }

    boolean this_present_subqueryId = true;
    boolean that_present_subqueryId = true;
    if (this_present_subqueryId || that_present_subqueryId) {
      if (!(this_present_subqueryId && that_present_subqueryId))
        return false;
      if (this.subqueryId != that.subqueryId)
        return false;
    }

    boolean this_present_index = true && this.isSetIndex();
    boolean that_present_index = true && that.isSetIndex();
    if (this_present_index || that_present_index) {
      if (!(this_present_index && that_present_index))
        return false;
      if (!this.index.equals(that.index))
        return false;
    }

    boolean this_present_shardId = true;
    boolean that_present_shardId = true;
    if (this_present_shardId || that_present_shardId) {
      if (!(this_present_shardId && that_present_shardId))
        return false;
      if (this.shardId != that.shardId)
        return false;
    }

    boolean this_present_localShardNum = true;
    boolean that_present_localShardNum = true;
    if (this_present_localShardNum || that_present_localShardNum) {
      if (!(this_present_localShardNum && that_present_localShardNum))
        return false;
      if (this.localShardNum != that.localShardNum)
        return false;
    }

    boolean this_present_docs = true && this.isSetDocs();
    boolean that_present_docs = true && that.isSetDocs();
    if (this_present_docs || that_present_docs) {
      if (!(this_present_docs && that_present_docs))
        return false;
      if (!this.docs.equals(that.docs))
        return false;
    }

    boolean this_present_batchNum = true && this.isSetBatchNum();
    boolean that_present_batchNum = true && that.isSetBatchNum();
    if (this_present_batchNum || that_present_batchNum) {
      if (!(this_present_batchNum && that_present_batchNum))
        return false;
      if (this.batchNum != that.batchNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRequestId()) ? 131071 : 524287);
    if (isSetRequestId())
      hashCode = hashCode * 8191 + requestId.hashCode();

    hashCode = hashCode * 8191 + subqueryId;

    hashCode = hashCode * 8191 + ((isSetIndex()) ? 131071 : 524287);
    if (isSetIndex())
      hashCode = hashCode * 8191 + index.hashCode();

    hashCode = hashCode * 8191 + shardId;

    hashCode = hashCode * 8191 + localShardNum;

    hashCode = hashCode * 8191 + ((isSetDocs()) ? 131071 : 524287);
    if (isSetDocs())
      hashCode = hashCode * 8191 + docs.hashCode();

    hashCode = hashCode * 8191 + ((isSetBatchNum()) ? 131071 : 524287);
    if (isSetBatchNum())
      hashCode = hashCode * 8191 + batchNum;

    return hashCode;
  }

  @Override
  public int compareTo(DocBatch other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetRequestId()).compareTo(other.isSetRequestId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequestId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requestId, other.requestId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSubqueryId()).compareTo(other.isSetSubqueryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSubqueryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.subqueryId, other.subqueryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetIndex()).compareTo(other.isSetIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.index, other.index);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetShardId()).compareTo(other.isSetShardId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetShardId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.shardId, other.shardId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLocalShardNum()).compareTo(other.isSetLocalShardNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLocalShardNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.localShardNum, other.localShardNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDocs()).compareTo(other.isSetDocs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDocs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.docs, other.docs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetBatchNum()).compareTo(other.isSetBatchNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchNum, other.batchNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("DocBatch(");
    boolean first = true;

    sb.append("requestId:");
    if (this.requestId == null) {
      sb.append("null");
    } else {
      sb.append(this.requestId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("subqueryId:");
    sb.append(this.subqueryId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("index:");
    if (this.index == null) {
      sb.append("null");
    } else {
      sb.append(this.index);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("shardId:");
    sb.append(this.shardId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("localShardNum:");
    sb.append(this.localShardNum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("docs:");
    if (this.docs == null) {
      sb.append("null");
    } else {
      sb.append(this.docs);
    }
    first = false;
    if (isSetBatchNum()) {
      if (!first) sb.append(", ");
      sb.append("batchNum:");
      sb.append(this.batchNum);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (requestId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'requestId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'subqueryId' because it's a primitive and you chose the non-beans generator.
    if (index == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'index' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'shardId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'localShardNum' because it's a primitive and you chose the non-beans generator.
    if (docs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'docs' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class DocBatchStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DocBatchStandardScheme getScheme() {
      return new DocBatchStandardScheme();
    }
  }

  private static class DocBatchStandardScheme extends org.apache.thrift.scheme.StandardScheme<DocBatch> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, DocBatch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
          break;
        }
        switch (schemeField.id) {
          case 1: // REQUEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.requestId = iprot.readString();
              struct.setRequestIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SUBQUERY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.subqueryId = iprot.readI32();
              struct.setSubqueryIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.index = iprot.readString();
              struct.setIndexIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // SHARD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.shardId = iprot.readI32();
              struct.setShardIdIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LOCAL_SHARD_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.localShardNum = iprot.readI32();
              struct.setLocalShardNumIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DOCS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.docs = new java.util.ArrayList<DocInfo>(_list0.size);
                DocInfo _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new DocInfo();
                  _elem1.read(iprot);
                  struct.docs.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setDocsIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // BATCH_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.batchNum = iprot.readI32();
              struct.setBatchNumIsSet(true);
            } else {
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetSubqueryId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'subqueryId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetShardId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'shardId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetLocalShardNum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'localShardNum' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, DocBatch struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.requestId != null) {
        oprot.writeFieldBegin(REQUEST_ID_FIELD_DESC);
        oprot.writeString(struct.requestId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SUBQUERY_ID_FIELD_DESC);
      oprot.writeI32(struct.subqueryId);
      oprot.writeFieldEnd();
      if (struct.index != null) {
        oprot.writeFieldBegin(INDEX_FIELD_DESC);
        oprot.writeString(struct.index);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SHARD_ID_FIELD_DESC);
      oprot.writeI32(struct.shardId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LOCAL_SHARD_NUM_FIELD_DESC);
      oprot.writeI32(struct.localShardNum);
      oprot.writeFieldEnd();
      if (struct.docs != null) {
        oprot.writeFieldBegin(DOCS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.docs.size()));
          for (DocInfo _iter3 : struct.docs)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.isSetBatchNum()) {
        oprot.writeFieldBegin(BATCH_NUM_FIELD_DESC);
        oprot.writeI32(struct.batchNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class DocBatchTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public DocBatchTupleScheme getScheme() {
      return new DocBatchTupleScheme();
    }
  }

  private static class DocBatchTupleScheme extends org.apache.thrift.scheme.TupleScheme<DocBatch> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, DocBatch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.requestId);
      oprot.writeI32(struct.subqueryId);
      oprot.writeString(struct.index);
      oprot.writeI32(struct.shardId);
      oprot.writeI32(struct.localShardNum);
      {
        oprot.writeI32(struct.docs.size());
        for (DocInfo _iter4 : struct.docs)
        {
          _iter4.write(oprot);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetBatchNum()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetBatchNum()) {
        oprot.writeI32(struct.batchNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, DocBatch struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.requestId = iprot.readString();
      struct.setRequestIdIsSet(true);
      struct.subqueryId = iprot.readI32();
      struct.setSubqueryIdIsSet(true);
      struct.index = iprot.readString();
      struct.setIndexIsSet(true);
      struct.shardId = iprot.readI32();
      struct.setShardIdIsSet(true);
      struct.localShardNum = iprot.readI32();
      struct.setLocalShardNumIsSet(true);
      {
        org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.docs = new java.util.ArrayList<DocInfo>(_list5.size);
        DocInfo _elem6;
        for (int _i7 = 0; _i7 < _list5.size; ++_i7)
        {
          _elem6 = new DocInfo();
          _elem6.read(iprot);
          struct.docs.add(_elem6);
        }
      }
      struct.setDocsIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.batchNum = iprot.readI32();
        struct.setBatchNumIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

